// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id          Int @id @default(autoincrement())
  email       String @unique
  userName    String @db.VarChar(200)
  password    String
  phone       String
  isAdmin     Boolean @default(false)
  company     String  @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  verified    Boolean @default(false)
  sales       Sale[]
}

model Product {
  id            Int      @id @default(autoincrement())
  name          String
  price         Float
  color         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  category      String
  image         String   
  sizes         String[] @default([]) 
  sales         Sale[]
  available     AvailableProduct[]
}

model AvailableProduct {
  id          Int      @id @default(autoincrement())
  color       String 
  image       String
  productId   Int
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Sale {
  id         Int      @id @default(autoincrement())
  productId  Int
  userId     Int
  count      Int      @default(0)  // Sales count starts at 0
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([productId, userId])

}

model Article {
  id            Int @id @default(autoincrement())
  title         String @default("")
  description   String @default("")
  image         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}